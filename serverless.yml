service: card-tokenizer-api

frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs16.x
  environment:
    CREDIT_TABLE_TABLE: ${self:custom.CreditCardTableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: 
            - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.CreditCardTableName}*'
          #  "arn:aws:dynamodb:us-east-2:*:table/credit-card-table"
          # Resource: "arn:aws:dynamodb:us-east-2:*:table/credit-card-table"
functions:
  tokenizer-credit-card:
    handler: src/lambdas/tokenizer.handler
    description: "Tokenizador de tarjetas de credito"
    events:
      - http:
          path: /tokens
          method: post

  retrieve-credit-card:
    handler: src/lambdas/retrieve.handler
    description: "Obtiene los datos de la tarjetas de credito a traves de un token"
    events:
      - http:
          path: /token
          method: get         

custom:
  CreditCardTableName: ${opt:tableName, self:service}-credit-card-table
  dynamodb:
    start:
      port: 5000
      inMemory: true
      migrate: true
      onStart: true
    stages: "dev"

resources:
  Resources:
    CreditCardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.CreditCardTableName}
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
